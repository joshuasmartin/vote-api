@page "/Subjects/{ShortName}/Scores/Add"

@rendermode InteractiveServer

<PageTitle>Add a Score - Vote With Your Wallet</PageTitle>

@using Azure
@using Microsoft.EntityFrameworkCore
@using VoteWithYourWallet.Common.Models
@using Azure.Data.Tables
@using BlazorCaptcha

@inject IJSRuntime JsRuntime
@inject NotificationService NotificationService
@inject IDbContextFactory<PrimaryContext> DbFactory
@inject IConfiguration Configuration

<RadzenLayout>
    <RadzenBody class="mt-xs-4">
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <a href="/" class="vwyw-logo-link">
                        <img src="vwyw-logo-horizontal-one.png" class="img-fluid" alt="Vote With Your Wallet"/>
                    </a>
                </div>
            </div>

            <div class="card p-md-3 mt-3 mb-3">
                <div class="card-body">
                    
                    <div class="d-flex flex-wrap justify-content-start mb-3 d-none d-md-inline-flex">
                        <button type="button" class="btn btn-lg btn-outline-dark d-flex align-items-center" @onclick="GoBack">
                            <RadzenIcon Icon="arrow_back"/>
                            Back
                        </button>
                    </div>

                    <div class="d-flex flex-wrap justify-content-start mb-3 d-md-none">
                        <button type="button" class="btn btn-sm btn-outline-dark d-flex align-items-center" @onclick="GoBack">
                            <RadzenIcon Icon="arrow_back"/>
                            Back
                        </button>
                    </div>

                    <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Secondary" Visible="_loading" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" class="mt-3 mt-md-0" />
                    
                    @if (!_loading)
                    {
                        <h2 class="mt-2 mb-2">Add a Score for @(_subject?.Name)</h2>
                    
                        <RadzenStack>
                            <RadzenRadioButtonList @bind-Value="@_topic" TValue="int" class="mt-3" Disabled="_working" >
                                <Items>
                                    <RadzenRadioButtonListItem Text="DEI" Value="1" />
                                    <RadzenRadioButtonListItem Text="Environment" Value="2" />
                                    <RadzenRadioButtonListItem Text="Unions" Value="3" />
                                    <RadzenRadioButtonListItem Text="Politics" Value="4" />
                                </Items>
                            </RadzenRadioButtonList>
                            
                            <RadzenRadioButtonList @bind-Value="@_number" TValue="int" class="mt-3" Disabled="_working" >
                                <Items>
                                    <RadzenRadioButtonListItem Text="Negative" Value="1" />
                                    <RadzenRadioButtonListItem Text="Positive" Value="3" />
                                </Items>
                            </RadzenRadioButtonList>

                            <hr />
                            
                            <RadzenFormField Text="Headline or Short Summary">
                                <RadzenTextBox @bind-Value="@_headline" id="textHeadline" Disabled="_working" />
                            </RadzenFormField>

                            <RadzenFormField Text="Source to Prove Your Score (URL)">
                                <RadzenTextBox @bind-Value="@_sourceUrl" Disabled="_working" />
                            </RadzenFormField>

                            <hr />

                            <Captcha @bind-CaptchaWord="@_captcha" CharNumber="@CaptchaLetters" Height="80" Width="260" />

                            <RadzenFormField Text="Verify the Characters Above">
                                <RadzenTextBox @bind-Value="@_captchaVerification" Disabled="_working" />
                            </RadzenFormField>

                            <hr />
                            
                            <RadzenFormField Text="Your Name">
                                <RadzenTextBox @bind-Value="@_userName" Disabled="_working" />
                            </RadzenFormField>

                            <RadzenFormField Text="Email Address">
                                <RadzenTextBox @bind-Value="@_emailAddress" Disabled="_working" />
                            </RadzenFormField>

                            <hr />

                            <div class="mt-3">
                                <button type="button" class="btn btn-lg btn-outline-dark" @onclick="Save" disabled="@_working">Continue</button>
                                <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Secondary" Visible="_working" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" class="mt-1" />
                            </div>
                        </RadzenStack>
                    }
                </div>
            </div>

            <footer>
                <p>&copy; Copyright 2025, Joshua Shane Martin | <a href="/Privacy">Privacy Policy</a></p>
            </footer>
        </div>
    </RadzenBody>
</RadzenLayout>

@code {
    [Parameter]
    public string? ShortName { get; set; }
    
    private int _number = 1;
    
    private int _topic = 1;

    private Subject? _subject = new();

    private string _headline = string.Empty;

    private string _userName = string.Empty;
    
    private string _emailAddress = string.Empty;

    private string _sourceUrl = string.Empty;

    private string _captchaVerification = string.Empty;

    private bool _loading = true;
    
    private bool _working;
    
    private string _captcha = string.Empty;

    private const int CaptchaLetters = 5;
    
    protected override Task OnInitializedAsync()
    {
        _captcha = Tools.GetCaptchaWord(CaptchaLetters);

        return base.OnInitializedAsync();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        try
        {
            _loading = true;
            StateHasChanged();
        
            await using var context = await DbFactory.CreateDbContextAsync();

            _subject = await context.Subjects!
                .FirstOrDefaultAsync(s => s.ShortName == ShortName);
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Notify the user.
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Duration = 5000,
                Summary = "Oops!",
                Detail = $"Cannot load the data: {ex.Message}"
            });
        }
        finally
        {
            _loading = false;
            StateHasChanged();
            
            await JsRuntime.InvokeVoidAsync("eval", """document.getElementById("textHeadline").focus()""");
            StateHasChanged();
        }
    }
    
    private async Task Save()
    {
        _working = true;
        StateHasChanged();
        
        // Determine if the user is a robot.
        if (_captchaVerification.ToLowerInvariant() != _captcha.ToLowerInvariant())
        {
            _working = false;
            StateHasChanged();
        
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Duration = 5000,
                Summary = "Oops, the characters are wrong. Please try again."
            });
            
            return;
        }

        try
        {
            // Save the contribution to the database.
            var score = new Score()
            {
                CreatedAt = DateTime.UtcNow,
                Topic = TopicForNumber(),
                Number = (byte)_number,
                Headline = _headline,
                SourceUrl = _sourceUrl,
                IsApproved = false,
                CreatedByUserId = 2, // Unknown user
                SubjectId = _subject!.Id
            };
            
            await using var context = await DbFactory.CreateDbContextAsync();

            await context.AddAsync(score);
            await context.SaveChangesAsync();
            
            // Save the contribution to Azure Storage.
            var tableClient = new TableClient(Configuration.GetConnectionString("ContributionsAzureStorage"),
                "scoreContributions");
        
            await tableClient.CreateIfNotExistsAsync();

            var guid = Guid.NewGuid().ToString();
        
            var tableEntity = new TableEntity(_subject?.Id.ToString(), guid)
            {
                { "emailAddress", _emailAddress },
                { "userName", _userName },
                { "headline", _headline },
                { "sourceUrl", _sourceUrl },
                { "scoreNumber", _number },
                { "topic", TopicForNumber() },
                { "subjectId", _subject?.Id }
            };
        
            await tableClient.AddEntityAsync(tableEntity);
        
            // Reset the form.
            _headline = string.Empty;
            _sourceUrl = string.Empty;
            _topic = 1;
            _number = 1;
            _captchaVerification = string.Empty;
            
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Duration = 10000,
                Summary = "Saved! We will review your contribution and publish if approved. Thank you."
            });
        }
        catch (Exception)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Duration = 5000,
                Summary = "Oops, could not save your contribution, please try again."
            });
        }
        finally
        {
            _captcha = Tools.GetCaptchaWord(CaptchaLetters);
            _working = false;
            StateHasChanged();
        }
    }

    private async Task GoBack()
    {
        await JsRuntime.InvokeVoidAsync("history.back");
    }

    private string TopicForNumber()
    {
        return _topic switch
        {
            1 => "Diversity",
            2 => "Environment",
            3 => "Unions",
            _ => "Politics"
        };
    }
}
