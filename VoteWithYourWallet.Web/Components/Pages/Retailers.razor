@page "/Retailers"

@rendermode InteractiveServer

<PageTitle>Look Up Retailers - Vote With Your Wallet</PageTitle>

@using VoteWithYourWallet.Common.Models
@using VoteWithYourWallet.Web.Services

@inject NotificationService NotificationService
@inject ICacheService CacheService

<RadzenLayout>
    <RadzenBody class="mt-xs-4">
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <a href="/" class="vwyw-logo-link">
                        <img src="vwyw-logo-horizontal-one.png" class="img-fluid" alt="Vote With Your Wallet"/>
                    </a>
                </div>
            </div>

            <div class="card p-md-3 mt-3 mb-3">
                <div class="card-body">
                    
                    <div class="row">
                        <div class="col-md-3">
                            <ul class="list-group">
                                <li class="list-group-item active" aria-current="true">
                                    <a href="/Retailers" class="d-flex align-items-center" style="text-decoration: none; border-bottom: none;">
                                        <RadzenIcon Icon="storefront"/>
                                        Retailers
                                    </a>
                                </li>
                                <li class="list-group-item">
                                    <a href="/Brands" class="d-flex align-items-center" style="text-decoration: none; border-bottom: none;">
                                        <RadzenIcon Icon="box"/>
                                        Brands
                                    </a>
                                </li>
                            </ul>

                            <ul class="list-group mt-3">
                                <li class="list-group-item">
                                    <a href="/Subjects/Add" class="d-flex align-items-center" style="text-decoration: none; border-bottom: none;">
                                        <RadzenIcon Icon="add"/>
                                        Suggest
                                    </a>
                                </li>
                            </ul>
                        </div>

                        <div class="col-md-9 col-xs-12">
                            <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Secondary" Visible="_loading" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" class="mt-3 mt-md-0" />

                            <ul class="list-group mt-3 mt-md-0">
                                @foreach (var subject in _subjects)
                                {
                                    <li class="list-group-item vwyw-list-group-item">
                                        <a href="@($"Subjects/{subject.ShortName}")">
                                            <div class="row d-flex align-content-center">
                                                <h3>@subject.Name</h3>
                                            </div>
                                            <div class="row">
                                                <div class="col-12 d-flex flex-wrap align-content-center">
                                                    <div class="d-flex align-content-center" style="margin-right: 1rem;">
                                                        <RadzenIcon Icon="@(IconForScore(subject.DiversityScore))" IconColor="@(ColorForScore(subject.DiversityScore))"/>
                                                        <span>DEI</span>
                                                    </div>
                                                    <div class="d-flex align-content-center" style="margin-right: 1rem;">
                                                        <RadzenIcon Icon="@(IconForScore(subject.EnvironmentalScore))" IconColor="@(ColorForScore(subject.EnvironmentalScore))"/>
                                                        <span>Environment</span>
                                                    </div>
                                                    <div class="d-flex align-content-center" style="margin-right: 1rem;">
                                                        <RadzenIcon Icon="@(IconForScore(subject.UnionScore))" IconColor="@(ColorForScore(subject.UnionScore))"/>
                                                        <span>Unions</span>
                                                    </div>
                                                    <div class="d-flex align-content-center">
                                                        <RadzenIcon Icon="@(IconForScore(subject.LobbyingScore))" IconColor="@(ColorForScore(subject.LobbyingScore))"/>
                                                        <span>Politics</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </a>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            </div>

            <footer>
                <p>&copy; Copyright 2025, Joshua Shane Martin | <a href="/Privacy">Privacy Policy</a></p>
            </footer>
        </div>
    </RadzenBody>
</RadzenLayout>

@code {
    [CascadingParameter]
    public EventCallback SignOutClicked { get; set; }

    private IEnumerable<Subject> _subjects = new List<Subject>();

    private bool _loading = true;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }
        
        if (_subjects.Any())
        {
            return;
        }
        
        try
        {
            _loading = true;
            
            StateHasChanged();

            _subjects = await CacheService.GetRetailersAsync();
        
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        
            // Notify the user.
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Duration = 5000,
                Summary = "Oops!",
                Detail = $"Cannot load the data: {ex.Message}"
            });
        }
        finally
        {
            _loading = false;
            
            StateHasChanged();
        }
    }

    public static string IconForScore(byte score)
    {
        return score switch
        {
            1 => "gpp_bad",
            2 => "gpp_maybe",
            3 => "verified_user",
            _ => "shield_question"
        };
    }

    public static string ColorForScore(byte score)
    {
        return score switch
        {
            1 => Colors.Danger,
            2 => Colors.Warning,
            3 => Colors.Success,
            _ => Colors.Black
        };
    }
}
