@page "/Override"

@rendermode InteractiveServer

<PageTitle>Add Suggestions Manually - Vote With Your Wallet</PageTitle>

@using Microsoft.EntityFrameworkCore
@using VoteWithYourWallet.Common.Models
@using VoteWithYourWallet.Web.Services

@inject NotificationService NotificationService
@inject IDbContextFactory<PrimaryContext> DbFactory
@inject ICacheService CacheService

<RadzenLayout>
    <RadzenBody class="mt-xs-4">
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <a href="/" class="vwyw-logo-link">
                        <img src="vwyw-logo-horizontal-one.png" class="img-fluid" alt="Vote With Your Wallet"/>
                    </a>
                </div>
            </div>

            <div class="card p-md-3 mt-3 mb-3">
                <div class="card-body">
                    <div class="row">
                        <div class="col-5">
                            <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Secondary" Visible="_loading" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" class="mt-3 mt-md-0" />
                            
                            <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowSorting="true"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            PageSize="200" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                                            Data="@_subjects" ColumnWidth="200px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single"
                                            RowClick="(DataGridRowMouseEventArgs<Subject> args) => RadzenDataGrid_RowClick(args.Data)" Style="cursor: pointer;">
                                <Columns>
                                    <RadzenDataGridColumn Property="Name" Title="Name"/>
                                </Columns>
                            </RadzenDataGrid>
                        </div>
                        <div class="col-7">
                            <h2 class="mt-2 mb-2">Add a Score for @(_subject?.Name)</h2>

                            <RadzenStack>
                                <RadzenRadioButtonList @bind-Value="@_topic" TValue="int" class="mt-3" Disabled="_working" >
                                    <Items>
                                        <RadzenRadioButtonListItem Text="DEI" Value="1" />
                                        <RadzenRadioButtonListItem Text="Environment" Value="2" />
                                        <RadzenRadioButtonListItem Text="Unions" Value="3" />
                                        <RadzenRadioButtonListItem Text="Politics" Value="4" />
                                    </Items>
                                </RadzenRadioButtonList>

                                <RadzenRadioButtonList @bind-Value="@_number" TValue="int" class="mt-3" Disabled="_working" >
                                    <Items>
                                        <RadzenRadioButtonListItem Text="Negative" Value="1" />
                                        <RadzenRadioButtonListItem Text="Positive" Value="3" />
                                    </Items>
                                </RadzenRadioButtonList>

                                <hr />

                                <RadzenFormField Text="Headline or Short Summary">
                                    <RadzenTextBox @bind-Value="@_headline" id="textHeadline" Disabled="_working" />
                                </RadzenFormField>

                                <RadzenFormField Text="Source to Prove Your Score (URL)">
                                    <RadzenTextBox @bind-Value="@_sourceUrl" Disabled="_working" />
                                </RadzenFormField>

                                <hr />

                                <div class="mt-3">
                                    <button type="button" class="btn btn-lg btn-outline-dark" @onclick="Save" disabled="@_working">Continue</button>
                                    <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Secondary" Visible="_working" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" class="mt-1" />
                                </div>
                            </RadzenStack>
                        </div>
                    </div>
                </div>
            </div>

            <footer>
                <p>&copy; Copyright 2025, Joshua Shane Martin | <a href="/Privacy">Privacy Policy</a></p>
                <p>
                    <a href="https://play.google.com/store/apps/details?id=app.withyourwallet.vote&hl=en_US">
                        <img src="badge.webp" alt="Download on Google Play Store" style="height: 3rem;" />
                    </a>

                    <a href="https://apps.apple.com/us/app/vote-with-your-wallet/id6741499797">
                        <img src="badge-example-preferred_2x.webp" alt="Download on the Apple App Store" style="height: 3rem;" />
                    </a>
                </p>
            </footer>
        </div>
    </RadzenBody>
</RadzenLayout>

@code {
    private IEnumerable<Subject>? _subjects;

    private Subject? _subject;
    
    private int _number = 1;
    
    private int _topic = 1;
    
    private string _sourceUrl = string.Empty;
    
    private string _headline = string.Empty;
    
    private bool _working;
    
    private bool _loading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        try
        {
            _loading = true;
            StateHasChanged();
        
            await using var context = await DbFactory.CreateDbContextAsync();

            _subjects = await context.Subjects!
                .OrderBy(s => s.Name)
                .ToListAsync();
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Notify the user.
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Duration = 5000,
                Summary = "Oops!",
                Detail = $"Cannot load the subjects: {ex.Message}"
            });
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private void RadzenDataGrid_RowClick(Subject subject)
    {
        _subject = subject;
    }

    private async Task Save()
    {
        _working = true;
        StateHasChanged();
        
        try
        {
            // Save the contribution to the database.
            var score = new Score()
            {
                CreatedAt = DateTime.UtcNow,
                Topic = TopicForNumber(),
                Number = (byte)_number,
                Headline = _headline.Trim(),
                SourceUrl = _sourceUrl.Trim(),
                IsApproved = true,
                CreatedByUserId = 1, // Joshua
                SubjectId = _subject!.Id
            };
            
            await using var context = await DbFactory.CreateDbContextAsync();

            await context.AddAsync(score);
            await context.SaveChangesAsync();
            
            // Reset the form.
            _headline = string.Empty;
            _sourceUrl = string.Empty;
            _topic = 1;
            _number = 1;
            
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Duration = 10000,
                Summary = "Saved the suggestion!"
            });

            CacheService.BustCache();
        }
        catch (Exception)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Duration = 5000,
                Summary = "Oops, could not save the suggestion, please try again."
            });
        }
        finally
        {
            _working = false;
            StateHasChanged();
        }
    }

    private string TopicForNumber()
    {
        return _topic switch
        {
            1 => "Diversity",
            2 => "Environment",
            3 => "Unions",
            _ => "Politics"
        };
    }
}
